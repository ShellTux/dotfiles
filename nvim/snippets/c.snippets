# C Template file
snippet ctemplate "C Template file" "include stdio and main function"
	#include <${1:header}.h>
	
	int main(void) {
		${0}
		return 0;
	}

snippet HelloWorld "Hello World in C"
	#include <stdio.h>

	int main(void) {
		printf("Hello world!\n");
		return 0;
	}

snippet getopt "Get arguments from the command line"
	int optionCode;
	int digitOptionIndex = 0;

	while (1) {
		int currentOptionIndex = optind ? optind : 1;
		int longOptionIndex = 0;

		static struct option longOptions[] = {
			{"add",     required_argument, 0,  0 },
			{"append",  no_argument,       0,  0 },
			{"delete",  required_argument, 0,  0 },
			{"verbose", no_argument,       0,  0 },
			{"create",  required_argument, 0, 'c'},
			{"file",    required_argument, 0,  0 },
			{"version", no_argument,       0, 'v'},
			{"help",    no_argument,       0, 'h'},
			${1}
			{0, 0, 0,  0 }
		};

		optionCode = getopt_long(argc, argv, "hv",
				longOptions, &longOptionIndex);
		if (optionCode == -1) {
			break;
		}

		switch (optionCode) {
			case 0:
				printf("Option: %s", longOptions[longOptionIndex].name);
				if (optarg) {
					printf(" with argument: %s", optarg);
				}
				printf("\n");
				break;

			case '0':
			case '1':
			case '2':
				if (digitOptionIndex != 0 && digitOptionIndex != currentOptionIndex) {
					printf("Digits occur in two different argv-elements.\n");
				}
				digitOptionIndex = currentOptionIndex;
				printf("Option: %c\n", optionCode);
				break;

			case 'a':
				printf("Option: a\n");
				break;

			case 'b':
				printf("Option: b\n");
				break;

			case 'c':
				printf("Option: c with value '%s'\n", optarg);
				break;

			case 'd':
				printf("Option: d with value '%s'\n", optarg);
				break;

			case '?':
				break;

			default:
				printf("?? Getopt returned character code 0%o ??\n", optionCode);
		}
	}

	if (optind < argc) {
		printf("Non-option arguments: ");
		while (optind < argc) {
			printf("%s ", argv[optind++]);
		}
		printf("\n");
	}

	exit(EXIT_SUCCESS);

snippet doxygen "Function Documentation following the doxygen standard"
	/**
	 * @brief ${1:A brief description of the function purpose}
	 *
	 * @param ${2:a} ${3:Description}
	 *${0}
	 * @return ${6:Description}
	 */

snippet for
	for (${1:int} ${2:i} = ${3:0} ; ${2:i} < ${4:10} ; ++${2:i}) {
		${0}
	}
